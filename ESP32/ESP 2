#include <OneWire.h>
#include <WiFi.h>
#include <PubSubClient.h>
#include "time.h"
<<<<<<< HEAD

#include <Wire.h>
#include <Adafruit_ADS1X15.h>

#include <DHT.h>

#include <SoftwareSerial.h>

#include <Adafruit_MLX90614.h>
=======
#include <Adafruit_ADS1X15.h>

#include <Wire.h>
>>>>>>> f918491bd0ede085f12913641fbc66017b5efb0e

// Konfigurasi jaringan Wi-Fi
const char *ssid = "Lab Telkom 2.4 GHz";
const char *password = "telekomunikasi";

// Konfigurasi server MQTT di VPS Anda
const char *mqtt_server = "vps.isi-net.org";
const int mqtt_port = 1883;
const char *mqtt_user = "unila";
const char *mqtt_password = "pwdMQTT@123";
const char *topic_utama = "ics/gisting2";
const char *ntpServer = "pool.ntp.org";
const long gmtOffset_sec = 25200;
const int daylightOffset_sec = 3600;

WiFiClient espClient;
PubSubClient client(espClient);

unsigned long lastMsgTime = 0;
const long Interval = 5000; // Kirim data setiap 5 detik

// ********SOIL******
Adafruit_ADS1115 ads;

// ******WATER*******
#define LED_BUILTIN 23

// Define pins for water flow sensors
#define SENSOR1 15
#define SENSOR2 2
#define SENSOR3 13
#define SENSOR4 32
#define SENSOR5 35
#define SENSOR6 34
#define SENSOR7 12
#define SENSOR8 14
#define SENSOR9 27
#define SENSOR10 26
#define SENSOR11 25
#define SENSOR12 33

long currentMillis = 0;
long previousMillis = 0;
int interval = 1000;
boolean ledState = LOW;

<<<<<<< HEAD
// ********************RELAY*************************
#define RELAY_PIN 18
#define RELAY_PIN2 19
=======
// Calibration factors for each sensor (modify as needed)
float calibrationFactor1 = 4.5;
float calibrationFactor2 = 4.5;
float calibrationFactor3 = 4.5;
float calibrationFactor4 = 4.5;
float calibrationFactor5 = 4.5;
float calibrationFactor6 = 4.5;
float calibrationFactor7 = 4.5;
float calibrationFactor8 = 4.5;
float calibrationFactor9 = 4.5;
float calibrationFactor10 = 4.5;
float calibrationFactor11 = 4.5;
float calibrationFactor12 = 4.5;
>>>>>>> f918491bd0ede085f12913641fbc66017b5efb0e

volatile byte pulseCount1, pulseCount2, pulseCount3, pulseCount4, pulseCount5, pulseCount6, pulseCount7, pulseCount8, pulseCount9, pulseCount10, pulseCount11, pulseCount12;
byte pulse1Sec1, pulse1Sec2, pulse1Sec3, pulse1Sec4, pulse1Sec5, pulse1Sec6, pulse1Sec7, pulse1Sec8, pulse1Sec9, pulse1Sec10, pulse1Sec11, pulse1Sec12;
float flowRate1, flowRate2, flowRate3, flowRate4, flowRate5, flowRate6, flowRate7, flowRate8, flowRate9, flowRate10, flowRate11, flowRate12;
unsigned int flowMilliLitres1, flowMilliLitres2, flowMilliLitres3, flowMilliLitres4, flowMilliLitres5, flowMilliLitres6, flowMilliLitres7, flowMilliLitres8, flowMilliLitres9, flowMilliLitres10, flowMilliLitres11, flowMilliLitres12;
unsigned long totalMilliLitres1, totalMilliLitres2, totalMilliLitres3, totalMilliLitres4, totalMilliLitres5, totalMilliLitres6, totalMilliLitres7, totalMilliLitres8, totalMilliLitres9, totalMilliLitres10, totalMilliLitres11, totalMilliLitres12;

<<<<<<< HEAD
// ********************WEIGHT*************************
#include <HX711_ADC.h>

const int HX711_dout_1 = 5;
const int HX711_sck_1 = 4;

const int HX711_dout_2 = 2; // Ganti dengan pin dout sensor berat kedua
const int HX711_sck_2 = 15;  // Ganti dengan pin sck sensor berat kedua

HX711_ADC LoadCell_1(HX711_dout_1, HX711_sck_1);
HX711_ADC LoadCell_2(HX711_dout_2, HX711_sck_2);
=======
void IRAM_ATTR pulseCounter1()
{
    pulseCount1++;
}

void IRAM_ATTR pulseCounter2()
{
    pulseCount2++;
}

void IRAM_ATTR pulseCounter3()
{
    pulseCount3++;
}
>>>>>>> f918491bd0ede085f12913641fbc66017b5efb0e

void IRAM_ATTR pulseCounter4()
{
    pulseCount4++;
}
void IRAM_ATTR pulseCounter5()
{
    pulseCount5++;
}
void IRAM_ATTR pulseCounter6()
{
    pulseCount6++;
}
void IRAM_ATTR pulseCounter7()
{
    pulseCount7++;
}
void IRAM_ATTR pulseCounter8()
{
    pulseCount8++;
}
void IRAM_ATTR pulseCounter9()
{
    pulseCount9++;
}
void IRAM_ATTR pulseCounter10()
{
    pulseCount10++;
}
void IRAM_ATTR pulseCounter11()
{
    pulseCount11++;
}
void IRAM_ATTR pulseCounter12()
{
    pulseCount12++;
}

float fix0, fix1, fix2;

int jam, minute, second, tanggal, bulan, tahun;

void setup(void)
{
    Serial.begin(9600);
    setupWiFi();
    client.setServer(mqtt_server, mqtt_port);
    configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);

    printLocalTime();
    setsoil();
    setwater();
}

void loop()
{
    if (!client.connected())
    {
        reconnectMQTT();
    }
    client.loop();
    printLocalTime();
    sensorsoil();
    sensorwater();
    nodered();

    delay(30000);
}

void nodered()
{

    // Buat objek JSON yang berisi data dari keempat sensor
    char utamaStr[1000]; // Buffer untuk menyimpan JSON
    snprintf(utamaStr, sizeof(utamaStr),
             "{"
<<<<<<< HEAD
             "\"datetime\": \"%04d-%02d-%02dT%02d:%02d:%02d+07:00\","
             "\"suhuudara\": %.2f,"
            // "\"humidity\": %.2f,"
             "\"infrared_1\": %.2f,"
             "\"infrared_2\": %.2f,"
             "\"anemo\": %.2f,"
             "\"winddirect\": %.2f,"
             "\"weight_3\": %.2f,"
             "\"weight_4\": %.2f,"
             "\"uvlampu\": %.2f,"
             "\"coolingsystem\": %.2f"
             "}",
             tahun, bulan, tanggal, jam, minute, second, temperature, mlx1.readObjectTempC(), mlx2.readObjectTempC(), Address0, degrees, LoadCell_1.getData(), LoadCell_2.getData(), relay1, relay2);
=======
             "\"TimeStamp\": \"%04d-%02d-%02dT%02d:%02d:%02d+07:00\","
             "\"soil1\": %.2f,"
             "\"soil2\": %.2f,"
             "\"soil3\": %.2f,"
             "\"water1\": %.2f,"
             "\"water2\": %.2f,"
             "\"water3\": %.2f,"
             "\"water4\": %.2f,"
             "\"water5\": %.2f,"
             "\"water6\": %.2f,"
             "\"water7\": %.2f,"
             "\"water8\": %.2f,"
             "\"water9\": %.2f,"
             "\"water10\": %.2f,"
             "\"water11\": %.2f,"
             "\"water12\": %.2f,"
             "}",
             tahun, bulan, tanggal, jam, minute, second, fix0, fix1, fix2, flowRate1, flowRate2, flowRate3, flowRate4, flowRate5, flowRate6, flowRate7, flowRate8, flowRate9, flowRate10, flowRate11, flowRate12);
>>>>>>> f918491bd0ede085f12913641fbc66017b5efb0e

    client.publish(topic_utama, utamaStr); // Mengirim data suhu ke broker MQTT
}

void printLocalTime()
{
    struct tm timeinfo;
    if (!getLocalTime(&timeinfo))
    {
        Serial.println("Failed to obtain time");
        return;
    }

    jam = timeinfo.tm_hour;
    minute = timeinfo.tm_min;
    second = timeinfo.tm_sec;

    tanggal = timeinfo.tm_mday;
    bulan = timeinfo.tm_mon + 1;     // Bulan dimulai dari 0, sehingga Anda perlu menambahkan 1
    tahun = 1900 + timeinfo.tm_year; // Tahun dimulai dari 1900

    char strftime_buf[50]; // Buffer untuk menyimpan timestamp yang diformat
    strftime(strftime_buf, sizeof(strftime_buf), "%A, %d %B %Y %H:%M:%S", &timeinfo);
    Serial.println(strftime_buf);
}

void setupWiFi()
{
    Serial.print("Menghubungkan ke WiFi...");
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED)
    {
        delay(5000);
        Serial.println("Menghubungkan ke WiFi...");
    }
    Serial.println("Terhubung ke WiFi");
}

void reconnectMQTT()
{
    while (!client.connected())
    {
        Serial.print("Menghubungkan ke broker MQTT...");
        if (client.connect("ESP32Client", mqtt_user, mqtt_password))
        {
            Serial.println("Terhubung ke broker MQTT");
        }
        else
        {
            Serial.print("Gagal, kode kesalahan = ");
            Serial.println(client.state());
            delay(5000);
        }
    }
}

void callback(char *topic, byte *payload, unsigned int length)
{
    // Implementasi callback jika diperlukan
}

void setsoil()
{
    Serial.println("Getting single-ended readings from AIN0..3");
    Serial.println("ADC Range: +/- 6.144V (1 bit = 3mV/ADS1015, 0.1875mV/ADS1115)");

<<<<<<< HEAD
    // Kontrol RELAY_PIN2
    if (jam >= 18 && jam < 23 || jam >= 0 && jam < 6)
    {
        digitalWrite(RELAY_PIN, LOW);
        relay1 = 1;
        Serial.print("Relay 1: ");
        Serial.println(relay1);
    }
    else
    {
        digitalWrite(RELAY_PIN, HIGH);
        relay1 = 0;
        Serial.println(relay1);
    }
}

// air pendingin
void relay33()
{

    struct tm timeinfo;
    if (!getLocalTime(&timeinfo))
    {
        Serial.println("Failed to obtain time");
        return;
    }
    // Extract the hour (0-23) from the struct tm
    int jam = timeinfo.tm_hour;
    int minute = timeinfo.tm_min;

    // Kontrol RELAY_PIN2
    if (temperature > 32)
    {
        digitalWrite(RELAY_PIN2, LOW);
        relay2 = 1;
        Serial.println(relay2);
    }
    else
    {
        digitalWrite(RELAY_PIN2, HIGH);
        relay2 = 0;
        Serial.print("Relay 2 = ");
        Serial.print(relay2);
        Serial.println(relay2);
    }
}
void setinfra()
{
    Wire.begin(); // Initialize the I2C communication

    // Configure TCA9548A channel (0 for the first sensor, 1 for the second sensor)
    selectTCAChannel(0); // Choose the channel for the first sensor

    if (!mlx1.begin())
    {
        Serial.println("Error connecting to MLX sensor 1. Check wiring.");
        while (1)
            ;
    }

    // Wait for a moment before switching to the second sensor
    delay(1000);

    // Configure TCA9548A channel for the second sensor
    selectTCAChannel(1); // Choose the channel for the second sensor

    if (!mlx2.begin())
    {
        Serial.println("Error connecting to MLX sensor 2. Check wiring.");
        while (1)
            ;
    }
}

void sensorinfra()
{
    selectTCAChannel(0); // Select channel 0 (first sensor)
    Serial.print("Sensor 1 - Ambient temperature = ");
    Serial.print(mlx1.readAmbientTempC());
    Serial.print("°C   ");
    Serial.print("Object temperature = ");
    Serial.print(mlx1.readObjectTempC());
    Serial.println("°C");

    selectTCAChannel(1); // Select channel 1 (second sensor)
    Serial.print("Sensor 2 - Ambient temperature = ");
    Serial.print(mlx2.readAmbientTempC());
    Serial.print("°C   ");
    Serial.print("Object temperature = ");
    Serial.print(mlx2.readObjectTempC());
    Serial.println("°C");

    Serial.println("-----------------------------------------------------------------");
}


void setweight() {

    LoadCell_1.begin();
    LoadCell_1.start(2000);
    LoadCell_1.setCalFactor(106.26);

    LoadCell_2.begin();
    LoadCell_2.start(2000);
    LoadCell_2.setCalFactor(106.26);
}

void sensorweight() {
    LoadCell_1.update();
    LoadCell_2.update();

    float weight_1 = LoadCell_1.getData();
    float weight_2 = LoadCell_2.getData();

    if (weight_1 < 0)
    {
        weight_1 = 0;
    }

    if (weight_2 < 0)
    {
        weight_2 = 0;
    }

    Serial.print("Weight Sensor 1 [g]: ");
    Serial.println(weight_1);

    Serial.print("Weight Sensor 2 [g]: ");
    Serial.println(weight_2);
}

void setanemo()
{
    mySerial2.begin(9600);
    ModifyAddress(0x00, Address0); // Modify device address0, please comment out this sentence after modifying the address0 and power on again.
}

void sensoranemo()
{
    Serial.print(readWindSpeed(Address0)); // Read wind speed
    Serial.println("m/s");
}

void setdht()
{
    dht.begin();
}

void sensordht()
{
    humidity = dht.readHumidity();
    temperature = dht.readTemperature();

    // Periksa apakah pembacaan sensor berhasil
    if (isnan(humidity) || isnan(temperature))
    {
        Serial.println("Gagal membaca data dari sensor DHT22!");
        return;
    }

    // Tampilkan nilai kelembaban dan suhu
    Serial.print("Kelembaban: ");
    Serial.print(humidity);
    Serial.print("%\t");
    Serial.print("Suhu: ");
    Serial.print(temperature);
    Serial.println("°C");
}

void setwind()
{
    // Mulai koneksi dengan modul ADS1115
    if (!ads.begin(ADS1115_ADDRESS))
    {
        Serial.println("Couldn't find ADS1115");
        while (1)
            ;
    }

    // Set range ke 4.096V (default adalah 6.144V)
=======
>>>>>>> f918491bd0ede085f12913641fbc66017b5efb0e
    ads.setGain(GAIN_TWOTHIRDS);

    if (!ads.begin())
    {
        Serial.println("Failed to initialize ADS.");
        while (1)
            ;
    }
}

void sensorsoil()
{
    int16_t adc0, adc1, adc2;
    float volts0, volts1, volts2;

    adc0 = ads.readADC_SingleEnded(0);
    adc1 = ads.readADC_SingleEnded(1);
    adc2 = ads.readADC_SingleEnded(2);

    volts0 = ads.computeVolts(adc0);
    volts1 = ads.computeVolts(adc1);
    volts2 = ads.computeVolts(adc2);

    // Pastikan rentang nilai ADC yang diharapkan sesuai dengan sensor soil moisture
    float adcMin = 0.5;  // Ganti dengan nilai ADC terendah yang dihasilkan oleh sensor
    float adcMax = 2.53; // Ganti dengan nilai ADC tertinggi yang dihasilkan oleh sensor

    float datakonversi0 = (volts0 - adcMin) / (adcMax - adcMin) * 100;
    float datakonversi1 = (volts1 - adcMin) / (adcMax - adcMin) * 100;
    float datakonversi2 = (volts2 - adcMin) / (adcMax - adcMin) * 100;

    fix0 = 100 - datakonversi0;
    fix1 = 100 - datakonversi1;
    fix2 = 100 - datakonversi2;

    Serial.print("A0:");
    Serial.print(fix0);
    Serial.print("%,  ");
    Serial.print("A1:");
    Serial.print(fix1);
    Serial.print("%,  ");
    Serial.print("A2:");
    Serial.print(fix2);
    Serial.print("%,  ");

    delay(1000);
}

void setwater()
{
    pinMode(LED_BUILTIN, OUTPUT);

    pinMode(SENSOR1, INPUT_PULLUP);
    pinMode(SENSOR2, INPUT_PULLUP);
    pinMode(SENSOR3, INPUT_PULLUP);
    pinMode(SENSOR4, INPUT_PULLUP);
    pinMode(SENSOR5, INPUT_PULLUP);
    pinMode(SENSOR6, INPUT_PULLUP);
    pinMode(SENSOR7, INPUT_PULLUP);
    pinMode(SENSOR8, INPUT_PULLUP);
    pinMode(SENSOR9, INPUT_PULLUP);
    pinMode(SENSOR10, INPUT_PULLUP);
    pinMode(SENSOR11, INPUT_PULLUP);
    pinMode(SENSOR12, INPUT_PULLUP);

    pulseCount1 = 0;
    pulseCount2 = 0;
    pulseCount3 = 0;
    pulseCount4 = 0;
    pulseCount5 = 0;
    pulseCount6 = 0;
    pulseCount7 = 0;
    pulseCount8 = 0;
    pulseCount9 = 0;
    pulseCount10 = 0;
    pulseCount11 = 0;
    pulseCount12 = 0;

    flowRate1 = 0.0;
    flowRate2 = 0.0;
    flowRate3 = 0.0;
    flowRate4 = 0.0;
    flowRate5 = 0.0;
    flowRate6 = 0.0;
    flowRate7 = 0.0;
    flowRate8 = 0.0;
    flowRate9 = 0.0;
    flowRate10 = 0.0;
    flowRate11 = 0.0;
    flowRate12 = 0.0;

    flowMilliLitres1 = 0;
    flowMilliLitres2 = 0;
    flowMilliLitres3 = 0;
    flowMilliLitres4 = 0;
    flowMilliLitres5 = 0;
    flowMilliLitres6 = 0;
    flowMilliLitres7 = 0;
    flowMilliLitres8 = 0;
    flowMilliLitres9 = 0;
    flowMilliLitres10 = 0;
    flowMilliLitres11 = 0;
    flowMilliLitres12 = 0;

    totalMilliLitres1 = 0;
    totalMilliLitres2 = 0;
    totalMilliLitres3 = 0;
    totalMilliLitres4 = 0;
    totalMilliLitres5 = 0;
    totalMilliLitres6 = 0;
    totalMilliLitres7 = 0;
    totalMilliLitres8 = 0;
    totalMilliLitres9 = 0;
    totalMilliLitres10 = 0;
    totalMilliLitres11 = 0;
    totalMilliLitres12 = 0;

    attachInterrupt(digitalPinToInterrupt(SENSOR1), pulseCounter1, FALLING);
    attachInterrupt(digitalPinToInterrupt(SENSOR2), pulseCounter2, FALLING);
    attachInterrupt(digitalPinToInterrupt(SENSOR3), pulseCounter3, FALLING);
    attachInterrupt(digitalPinToInterrupt(SENSOR4), pulseCounter4, FALLING);
    attachInterrupt(digitalPinToInterrupt(SENSOR5), pulseCounter5, FALLING);
    attachInterrupt(digitalPinToInterrupt(SENSOR6), pulseCounter6, FALLING);
    attachInterrupt(digitalPinToInterrupt(SENSOR7), pulseCounter7, FALLING);
    attachInterrupt(digitalPinToInterrupt(SENSOR8), pulseCounter8, FALLING);
    attachInterrupt(digitalPinToInterrupt(SENSOR9), pulseCounter9, FALLING);
    attachInterrupt(digitalPinToInterrupt(SENSOR10), pulseCounter10, FALLING);
    attachInterrupt(digitalPinToInterrupt(SENSOR11), pulseCounter11, FALLING);
    attachInterrupt(digitalPinToInterrupt(SENSOR12), pulseCounter12, FALLING);
}

void sensorwater()
{
    currentMillis = millis();

    if (currentMillis - previousMillis > interval)
    {
        pulse1Sec1 = pulseCount1;
        pulseCount1 = 0;

        pulse1Sec2 = pulseCount2;
        pulseCount2 = 0;

        pulse1Sec3 = pulseCount3;
        pulseCount3 = 0;

        pulse1Sec4 = pulseCount4;
        pulseCount4 = 0;
        pulse1Sec5 = pulseCount5;
        pulseCount5 = 0;
        pulse1Sec6 = pulseCount6;
        pulseCount6 = 0;
        pulse1Sec7 = pulseCount7;
        pulseCount7 = 0;
        pulse1Sec8 = pulseCount8;
        pulseCount8 = 0;
        pulse1Sec9 = pulseCount9;
        pulseCount9 = 0;
        pulse1Sec10 = pulseCount10;
        pulseCount10 = 0;
        pulse1Sec11 = pulseCount11;
        pulseCount11 = 0;
        pulse1Sec12 = pulseCount12;
        pulseCount12 = 0;

        flowRate1 = ((1000.0 / (millis() - previousMillis)) * pulse1Sec1) / calibrationFactor1;
        flowRate2 = ((1000.0 / (millis() - previousMillis)) * pulse1Sec2) / calibrationFactor2;
        flowRate3 = ((1000.0 / (millis() - previousMillis)) * pulse1Sec3) / calibrationFactor3;
        flowRate4 = ((1000.0 / (millis() - previousMillis)) * pulse1Sec4) / calibrationFactor4;
        flowRate5 = ((1000.0 / (millis() - previousMillis)) * pulse1Sec5) / calibrationFactor5;
        flowRate6 = ((1000.0 / (millis() - previousMillis)) * pulse1Sec6) / calibrationFactor6;
        flowRate7 = ((1000.0 / (millis() - previousMillis)) * pulse1Sec7) / calibrationFactor7;
        flowRate8 = ((1000.0 / (millis() - previousMillis)) * pulse1Sec8) / calibrationFactor8;
        flowRate9 = ((1000.0 / (millis() - previousMillis)) * pulse1Sec9) / calibrationFactor9;
        flowRate10 = ((1000.0 / (millis() - previousMillis)) * pulse1Sec10) / calibrationFactor10;
        flowRate11 = ((1000.0 / (millis() - previousMillis)) * pulse1Sec11) / calibrationFactor11;
        flowRate12 = ((1000.0 / (millis() - previousMillis)) * pulse1Sec12) / calibrationFactor12;

        previousMillis = millis();

        flowMilliLitres1 = (flowRate1 / 60) * 1000;
        flowMilliLitres2 = (flowRate2 / 60) * 1000;
        flowMilliLitres3 = (flowRate3 / 60) * 1000;
        flowMilliLitres4 = (flowRate4 / 60) * 1000;
        flowMilliLitres5 = (flowRate5 / 60) * 1000;
        flowMilliLitres6 = (flowRate6 / 60) * 1000;
        flowMilliLitres7 = (flowRate7 / 60) * 1000;
        flowMilliLitres8 = (flowRate8 / 60) * 1000;
        flowMilliLitres9 = (flowRate9 / 60) * 1000;
        flowMilliLitres10 = (flowRate10 / 60) * 1000;
        flowMilliLitres11 = (flowRate11 / 60) * 1000;
        flowMilliLitres12 = (flowRate12 / 60) * 1000;

        totalMilliLitres1 += flowMilliLitres1;
        totalMilliLitres2 += flowMilliLitres2;
        totalMilliLitres3 += flowMilliLitres3;
        totalMilliLitres4 += flowMilliLitres4;
        totalMilliLitres5 += flowMilliLitres5;
        totalMilliLitres6 += flowMilliLitres6;
        totalMilliLitres7 += flowMilliLitres7;
        totalMilliLitres8 += flowMilliLitres8;
        totalMilliLitres9 += flowMilliLitres9;
        totalMilliLitres10 += flowMilliLitres10;
        totalMilliLitres11 += flowMilliLitres11;
        totalMilliLitres12 += flowMilliLitres12;

        Serial.print("Flow 1: ");
        Serial.print(int(flowRate1)); // Print the integer part of the variable
        Serial.print("L/min,   ");

        Serial.print("Flow 2: ");
        Serial.print(int(flowRate2)); // Print the integer part of the variable
        Serial.print("L/min,   ");

        Serial.print("Flow 3: ");
        Serial.print(int(flowRate3)); // Print the integer part of the variable
        Serial.print("L/min,   ");

        Serial.print("Flow 4: ");
        Serial.print(int(flowRate4)); // Print the integer part of the variable
        Serial.print("L/min,   ");

        Serial.print("Flow 5: ");
        Serial.print(int(flowRate5)); // Print the integer part of the variable
        Serial.print("L/min,   ");

        Serial.print("Flow 6: ");
        Serial.print(int(flowRate6)); // Print the integer part of the variable
        Serial.print("L/min,   ");

        Serial.print("Flow 7: ");
        Serial.print(int(flowRate7)); // Print the integer part of the variable
        Serial.print("L/min,   ");

        Serial.print("Flow 8: ");
        Serial.print(int(flowRate8)); // Print the integer part of the variable
        Serial.print("L/min,   ");

        Serial.print("Flow 9: ");
        Serial.print(int(flowRate9)); // Print the integer part of the variable
        Serial.print("L/min,   ");

        Serial.print("Flow 10: ");
        Serial.print(int(flowRate10)); // Print the integer part of the variable
        Serial.print("L/min,   ");

        Serial.print("Flow 11: ");
        Serial.print(int(flowRate11)); // Print the integer part of the variable
        Serial.print("L/min,   ");
//tes
        Serial.print("Flow 12: ");
        Serial.print(int(flowRate12)); // Print the integer part of the variable
        Serial.print("");
    }
<<<<<<< HEAD

    crc = ((crc & 0x00ff) << 8) | ((crc & 0xff00) >> 8);
    return crc;
}

void addedCRC(uint8_t *buf, int len)
{
    uint16_t crc = 0xFFFF;
    for (int pos = 0; pos < len; pos++)
    {
        crc ^= (uint16_t)buf[pos];
        for (int i = 8; i != 0; i--)
        {
            if ((crc & 0x0001) != 0)
            {
                crc >>= 1;
                crc ^= 0xA001;
            }
            else
            {
                crc >>= 1;
            }
        }
    }
    buf[len] = crc % 0x100;
    buf[len + 1] = crc / 0x100;
}

float readWindSpeed(uint8_t Address0)
{
    uint8_t Data[7] = {0};                                             // Store the original data packet returned by the sensor
    uint8_t COM[8] = {0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00}; // Command for reading wind speed
    boolean ret = false;                                               // Wind speed acquisition success flag
    float WindSpeed = 0;
    long curr = millis();
    long curr1 = curr;
    uint8_t ch = 0;
    COM[0] = Address0;       // Add the complete command package with reference to the communication protocol.
    addedCRC(COM, 6);        // Add CRC_16 check for reading wind speed command packet
    mySerial2.write(COM, 8); // Send the command of reading the wind speed

    while (!ret)
    {
        if (millis() - curr > 1000)
        {
            WindSpeed = -1; // If the wind speed has not been read for more than 1000 milliseconds, it will be regarded as a timeout and return -1.
            break;
        }

        if (millis() - curr1 > 100)
        {
            mySerial2.write(COM, 8); // If the last command to read the wind speed is sent for more than 100 milliseconds and the return command has not been received, the command to read the wind speed will be re-sent
            curr1 = millis();
        }

        if (readN(&ch, 1) == 1)
        {
            if (ch == Address0)
            { // Read and judge the packet header.
                Data[0] = ch;
                if (readN(&ch, 1) == 1)
                {
                    if (ch == 0x03)
                    { // Read and judge the packet header.
                        Data[1] = ch;
                        if (readN(&ch, 1) == 1)
                        {
                            if (ch == 0x02)
                            { // Read and judge the packet header.
                                Data[2] = ch;
                                if (readN(&Data[3], 4) == 4)
                                {
                                    if (CRC16_2(Data, 5) == (Data[5] * 256 + Data[6]))
                                    { // Check data packet
                                        ret = true;
                                        WindSpeed = (Data[3] * 256 + Data[4]) / 10.00; // Calculate the wind speed
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return WindSpeed;
}

boolean ModifyAddress(uint8_t Address1, uint8_t Address2)
{
    uint8_t ModifyAddressCOM[11] = {0x00, 0x10, 0x10, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00};
    boolean ret = false;
    long curr = millis();
    long curr1 = curr;
    uint8_t ch = 0;
    ModifyAddressCOM[0] = Address1;
    ModifyAddressCOM[8] = Address2;
    addedCRC(ModifyAddressCOM, 9);
    mySerial2.write(ModifyAddressCOM, 11);
    while (!ret)
    {
        if (millis() - curr > 1000)
        {
            break;
        }

        if (millis() - curr1 > 100)
        {
            mySerial2.write(ModifyAddressCOM, 11);
            curr1 = millis();
        }

        if (readN(&ch, 1) == 1)
        {
            if (ch == Address1)
            {
                if (readN(&ch, 1) == 1)
                {
                    if (ch == 0x10)
                    {
                        if (readN(&ch, 1) == 1)
                        {
                            if (ch == 0x10)
                            {
                                if (readN(&ch, 1) == 1)
                                {
                                    if (ch == 0x00)
                                    {
                                        if (readN(&ch, 1) == 1)
                                        {
                                            if (ch == 0x00)
                                            {
                                                if (readN(&ch, 1) == 1)
                                                {
                                                    if (ch == 0x01)
                                                    {
                                                        // while (1) {
                                                        Serial.println("Please power on the sensor again.");
                                                        // delay(1000);
                                                        // }
                                                        ret = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return ret;
}
=======
}
>>>>>>> f918491bd0ede085f12913641fbc66017b5efb0e
